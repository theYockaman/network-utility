#!/usr/bin/env bash
set -euo pipefail

# PXE setup script for Ubuntu LTS server installer
# Usage: sudo ./setup-pxe.sh [--server-ip IP] [--net-if IF] [--ubuntu-ver VER]
# Example: sudo ./setup-pxe.sh --server-ip 192.168.1.10 --net-if eth0 --ubuntu-ver 24.04

# Defaults (override with args)
SERVER_IP="192.168.1.10"
NET_IF="eth0"
UBUNTU_VER="24.04"
ISO_URL="https://releases.ubuntu.com/${UBUNTU_VER}/ubuntu-${UBUNTU_VER}-live-server-amd64.iso"
TFTPROOT="/var/lib/tftpboot"
WWWROOT="/var/www/html"
DNSMASQ_CONF="/etc/dnsmasq.d/02-pxe.conf"
PXE_MENU_TEMPLATE="./pxe/pxelinux-default.cfg"
AUTOINSTALL_DIR="${WWWROOT}/autoinstall"

usage(){
  cat <<EOF
Usage: sudo $0 [--server-ip IP] [--net-if IF] [--ubuntu-ver VER] [--iso-url URL]
Defaults:
  SERVER_IP=${SERVER_IP}
  NET_IF=${NET_IF}
  UBUNTU_VER=${UBUNTU_VER}
  ISO_URL=${ISO_URL}
This script will:
  - install dnsmasq, tftpd-hpa, syslinux, nginx
  - create TFTP and HTTP directories
  - download and mount the Ubuntu Server ISO
  - copy kernel/initrd to TFTP and mirror ISO to HTTP
  - write dnsmasq and pxelinux menu files (replacing existing)
  - create nocloud autoinstall templates under ${AUTOINSTALL_DIR}
  - restart services and open firewall ports (ufw)
EOF
}

# Parse args
while [[ $# -gt 0 ]]; do
  case "$1" in
    --server-ip) SERVER_IP="$2"; shift 2;;
    --net-if) NET_IF="$2"; shift 2;;
    --ubuntu-ver) UBUNTU_VER="$2"; shift 2;;
    --iso-url) ISO_URL="$2"; shift 2;;
    -h|--help) usage; exit 0;;
    *) echo "Unknown arg: $1"; usage; exit 1;;
  esac
done

if [[ $EUID -ne 0 ]]; then
  echo "This script must be run as root (use sudo)"; exit 1
fi

echo "Using SERVER_IP=${SERVER_IP}, NET_IF=${NET_IF}, UBUNTU_VER=${UBUNTU_VER}"

# Install required packages
export DEBIAN_FRONTEND=noninteractive
apt update
apt install -y dnsmasq tftpd-hpa syslinux-common pxelinux nginx wget rsync whois || true

# Create tftp root
mkdir -p "${TFTPROOT}"
chown -R nobody:nogroup "${TFTPROOT}"
chmod -R 755 "${TFTPROOT}"

# Copy pxelinux.0 and menu modules
# Try several known locations
PXELINUX_SRC=""
for p in "/usr/lib/PXELINUX/pxelinux.0" "/usr/lib/syslinux/modules/bios/pxelinux.0" "/usr/lib/syslinux/pxelinux.0"; do
  if [[ -f "$p" ]]; then PXELINUX_SRC="$p"; break; fi
done
if [[ -z "$PXELINUX_SRC" ]]; then
  echo "pxelinux.0 not found on system. Ensure syslinux-common is installed."; exit 1
fi
cp -f "$PXELINUX_SRC" "${TFTPROOT}/pxelinux.0"
# copy menu module if present
for m in "/usr/lib/syslinux/modules/bios/menu.c32" "/usr/lib/PXELINUX/menu.c32"; do
  if [[ -f "$m" ]]; then cp -f "$m" "${TFTPROOT}/menu.c32" || true; break; fi
done

# Download ISO
WORKDIR="/tmp/pxe-setup-$$"
mkdir -p "$WORKDIR"
cd "$WORKDIR"
ISO_FILE="ubuntu-server-${UBUNTU_VER}.iso"
if [[ ! -f "$ISO_FILE" ]]; then
  echo "Downloading ISO from ${ISO_URL}..."
  wget -O "$ISO_FILE" "$ISO_URL"
fi

MNT="${WORKDIR}/iso-mount"
mkdir -p "$MNT"
mountpoint -q "$MNT" || mount -o loop "$ISO_FILE" "$MNT"

# Find kernel and initrd (common locations vary)
KERNEL_PATH=""
INITRD_PATH=""
# Search for likely files
for k in $(find "$MNT" -type f -name 'vmlinuz' -o -name 'vmlinuz.*' -o -name 'linux'); do
  KERNEL_PATH="$k"; break
done
for i in $(find "$MNT" -type f -name 'initrd' -o -name 'initrd.*' -o -name 'initrd.lz' -o -name 'initrd.img'); do
  INITRD_PATH="$i"; break
done

# Fallback to casper paths (live server)
if [[ -z "$KERNEL_PATH" && -f "$MNT/casper/vmlinuz" ]]; then KERNEL_PATH="$MNT/casper/vmlinuz"; fi
if [[ -z "$INITRD_PATH" && -f "$MNT/casper/initrd" ]]; then INITRD_PATH="$MNT/casper/initrd"; fi
if [[ -z "$KERNEL_PATH" || -z "$INITRD_PATH" ]]; then
  echo "Could not locate kernel/initrd inside ISO. Listing root of ISO for debugging:";
  ls -la "$MNT"
  exit 1
fi

# Copy kernel & initrd to tftp
KERNEL_NAME="ubuntu-${UBUNTU_VER}-vmlinuz"
INITRD_NAME="ubuntu-${UBUNTU_VER}-initrd"
cp -f "$KERNEL_PATH" "${TFTPROOT}/${KERNEL_NAME}"
cp -f "$INITRD_PATH" "${TFTPROOT}/${INITRD_NAME}"

# Mirror ISO contents to HTTP server path
HTTP_DIR="${WWWROOT}/ubuntu/${UBUNTU_VER}"
mkdir -p "$HTTP_DIR"
# Exclude .disk to reduce noise
rsync -a --exclude='.disk' "$MNT"/ "$HTTP_DIR/"

# Unmount and cleanup
umount "$MNT" || true
rm -f "$ISO_FILE"
rm -rf "$WORKDIR"

# Write dnsmasq configuration (overwrite)
cat > "${DNSMASQ_CONF}" <<EOF
# dnsmasq PXE + DHCP configuration (generated by setup-pxe.sh)
interface=${NET_IF}
bind-interfaces
# Adjust range to your network
dhcp-range=192.168.1.100,192.168.1.200,12h
enable-tftp
tftp-root=${TFTPROOT}
dhcp-boot=pxelinux.0
log-dhcp
EOF

# Create pxelinux config dir and default menu (overwrites existing)
mkdir -p "${TFTPROOT}/pxelinux.cfg"
cat > "${TFTPROOT}/pxelinux.cfg/default" <<'PXEDEFAULT'
DEFAULT menu
PROMPT 0
MENU TITLE Ubuntu __UBUNTU_VER__ PXE boot

LABEL install
  MENU LABEL ^Install Ubuntu __UBUNTU_VER__ Server (interactive)
  KERNEL __KERNEL__
  APPEND initrd=__INITRD__ boot=casper netboot=nfs ip=dhcp url=http://__SERVER_IP__/ubuntu/__UBUNTU_VER__/

LABEL autoinstall
  MENU LABEL ^Autoinstall Ubuntu __UBUNTU_VER__ Server (unattended)
  KERNEL __KERNEL__
  APPEND initrd=__INITRD__ boot=casper netboot=nfs ip=dhcp url=http://__SERVER_IP__/ubuntu/__UBUNTU_VER__/ autoinstall ds=nocloud-net;s=http://__SERVER_IP__/autoinstall/
PXEDEFAULT

# Replace placeholders
sed -i "s|__SERVER_IP__|${SERVER_IP}|g" "${TFTPROOT}/pxelinux.cfg/default"
sed -i "s|__UBUNTU_VER__|${UBUNTU_VER}|g" "${TFTPROOT}/pxelinux.cfg/default"
sed -i "s|__KERNEL__|${KERNEL_NAME}|g" "${TFTPROOT}/pxelinux.cfg/default"
sed -i "s|__INITRD__|${INITRD_NAME}|g" "${TFTPROOT}/pxelinux.cfg/default"

# Create autoinstall nocloud templates (overwrite)
mkdir -p "${AUTOINSTALL_DIR}"
cat > "${AUTOINSTALL_DIR}/user-data" <<'USERDATA'
#cloud-config
autoinstall:
  version: 1
  identity:
    hostname: pxe-ubuntu
    username: ubuntu
    password: "<YOUR_HASHED_PASSWORD>"  # Generate with: mkpasswd -m sha-512 'yourpassword'
  ssh:
    install-server: true
    authorized-keys:
      - "ssh-rsa AAAA... your_ssh_key_here"
  locale: en_US
  keyboard:
    layout: us
  storage:
    layout:
      name: lvm
  packages:
    - vim
    - openssh-server
  late-commands:
    - curtin in-target --target=/target -- apt -y update
USERDATA

cat > "${AUTOINSTALL_DIR}/meta-data" <<METADATA
instance-id: pxe-ubuntu
local-hostname: pxe-ubuntu
METADATA

# Ensure permissions
chown -R www-data:www-data "${WWWROOT}" || true
chmod -R 755 "${WWWROOT}"

# Restart services
systemctl restart tftpd-hpa dnsmasq nginx || true
systemctl enable dnsmasq tftpd-hpa nginx || true

# Firewall rules (optional)
if command -v ufw >/dev/null 2>&1; then
  ufw allow 69/udp
  ufw allow 80/tcp
  ufw allow 67/udp
fi

echo "PXE setup complete. Verify by booting a PXE client. Check /var/log/syslog for dnsmasq/tftp logs."
